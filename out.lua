-- Generated by Haxe 4.1.5
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            first = true
            buffer = {}
            for k,v in pairs(obj) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end
            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    print(obj)
    if obj.value then
        _G.print("Runtime Error: " .. _hx_tostring(obj.value));
    else
        _G.print("Runtime Error: " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__lua_lib_lrexlib_Rex = _G.require("rex_pcre")
__lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local EReg = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
___Xml_XmlType_Impl_ = _hx_e()
local Xml = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__haxe_xml__Access_NodeAccess_Impl_ = _hx_e()
__haxe_xml__Access_AttribAccess_Impl_ = _hx_e()
__haxe_xml__Access_HasAttribAccess_Impl_ = _hx_e()
__haxe_xml__Access_NodeListAccess_Impl_ = _hx_e()
__haxe_xml_Printer = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__parallax_Parallax = _hx_e()
__parallax_ParallaxCamera = _hx_e()
__parallax_ParallaxLayer = _hx_e()
__parallax_ParallaxSprite = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do 
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do 
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

EReg.new = function(r,opt) 
  local self = _hx_new(EReg.prototype)
  EReg.super(self,r,opt)
  return self
end
EReg.super = function(self,r,opt) 
  local ropt = 0;
  local _g = 0;
  local _g1 = __lua_lib_luautf8_Utf8.len(opt);
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    local _g = __lua_lib_luautf8_Utf8.sub(opt, i + 1, i + 1);
    if (_g) == "g" then 
      self.global = true;
    elseif (_g) == "i" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.CASELESS);
    elseif (_g) == "m" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.MULTILINE);
    elseif (_g) == "s" then 
      ropt = _hx_bit.bor(ropt,EReg.FLAGS.DOTALL);else end;
  end;
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UTF8);
  ropt = _hx_bit.bor(ropt,EReg.FLAGS.UCP);
  if (self.global == nil) then 
    self.global = false;
  end;
  self.r = __lua_lib_lrexlib_Rex.new(r, ropt);
end
EReg.__name__ = true
EReg.prototype = _hx_e();
EReg.prototype.replace = function(self,s,by) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len("$$") > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(by, "$$", idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(by)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(by, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len("$$");
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(by, idx, __lua_lib_luautf8_Utf8.len(by)));
      idx = nil;
    end;
  end;
  local chunks = ret;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < chunks.length) do 
    local chunk = chunks[_g1];
    _g1 = _g1 + 1;
    _g:push(__lua_lib_lrexlib_Rex.gsub(chunk, "\\$(\\d)", "%%%1", 1));
  end;
  chunks = _g;
  by = chunks:join("$");
  do return __lua_lib_lrexlib_Rex.gsub(s, self.r, by, (function() 
    local _hx_1
    if (self.global) then 
    _hx_1 = nil; else 
    _hx_1 = 1; end
    return _hx_1
  end )()) end
end

EReg.prototype.__class__ =  EReg

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = __lua_lib_luautf8_Utf8.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = __lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^[ \t\r\n]*([%-+]*0[xX][%da-fA-F]*)");
  if (hexMatch ~= nil) then 
    local sign;
    local _g = __lua_lib_luautf8_Utf8.byte(hexMatch, 1);
    if (_g) == 43 then 
      sign = 1;
    elseif (_g) == 45 then 
      sign = -1;else
    sign = 0; end;
    local pos = (function() 
      local _hx_1
      if (sign == 0) then 
      _hx_1 = 2; else 
      _hx_1 = 3; end
      return _hx_1
    end )();
    local len = nil;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(hexMatch)))) then 
      len = __lua_lib_luautf8_Utf8.len(hexMatch);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(hexMatch) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(hexMatch) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return (function() 
      local _hx_2
      if (sign == -1) then 
      _hx_2 = -1; else 
      _hx_2 = 1; end
      return _hx_2
    end )() * _G.tonumber(__lua_lib_luautf8_Utf8.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end
Std.parseFloat = function(x) 
  if ((x == nil) or (x == "")) then 
    do return (0/0) end;
  end;
  local digitMatch = _G.string.match(x, "^ *[%.%-+]?[0-9]%d*");
  if (digitMatch == nil) then 
    do return (0/0) end;
  end;
  local pos = __lua_lib_luautf8_Utf8.len(digitMatch);
  local len = nil;
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(x)))) then 
    len = __lua_lib_luautf8_Utf8.len(x);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(x) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(x) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  x = __lua_lib_luautf8_Utf8.sub(x, pos + 1, pos + len);
  local decimalMatch = _G.string.match(x, "^%.%d*");
  if (decimalMatch == nil) then 
    decimalMatch = "";
  end;
  local pos = __lua_lib_luautf8_Utf8.len(decimalMatch);
  local len = nil;
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(x)))) then 
    len = __lua_lib_luautf8_Utf8.len(x);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(x) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(x) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  x = __lua_lib_luautf8_Utf8.sub(x, pos + 1, pos + len);
  local eMatch = _G.string.match(x, "^[eE][+%-]?%d+");
  if (eMatch == nil) then 
    eMatch = "";
  end;
  local result = _G.tonumber(Std.string(Std.string(digitMatch) .. Std.string(decimalMatch)) .. Std.string(eMatch));
  if (result ~= nil) then 
    do return result end;
  else
    do return (0/0) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_e();

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.htmlEscape = function(s,quotes) 
  local buf_b = ({});
  local buf_length = 0;
  local _g_offset = 0;
  local _g_s = s;
  while (_g_offset < __lua_lib_luautf8_Utf8.len(_g_s)) do 
    _g_offset = _g_offset + 1;
    local code = __lua_lib_luautf8_Utf8.byte(_g_s, (_g_offset - 1) + 1);
    local code1 = code;
    if (code1) == 34 then 
      if (quotes) then 
        local str = "&quot;";
        _G.table.insert(buf_b, str);
        buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);
      else
        _G.table.insert(buf_b, __lua_lib_luautf8_Utf8.char(code));
        buf_length = buf_length + 1;
      end;
    elseif (code1) == 38 then 
      local str = "&amp;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);
    elseif (code1) == 39 then 
      if (quotes) then 
        local str = "&#039;";
        _G.table.insert(buf_b, str);
        buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);
      else
        _G.table.insert(buf_b, __lua_lib_luautf8_Utf8.char(code));
        buf_length = buf_length + 1;
      end;
    elseif (code1) == 60 then 
      local str = "&lt;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);
    elseif (code1) == 62 then 
      local str = "&gt;";
      _G.table.insert(buf_b, str);
      buf_length = buf_length + __lua_lib_luautf8_Utf8.len(str);else
    _G.table.insert(buf_b, __lua_lib_luautf8_Utf8.char(code));
    buf_length = buf_length + 1; end;
  end;
  do return _G.table.concat(buf_b) end;
end
StringTools.isSpace = function(s,pos) 
  if (((__lua_lib_luautf8_Utf8.len(s) == 0) or (pos < 0)) or (pos >= __lua_lib_luautf8_Utf8.len(s))) then 
    do return false end;
  end;
  local c = __lua_lib_luautf8_Utf8.byte(s, pos + 1);
  if (not ((c > 8) and (c < 14))) then 
    do return c == 32 end;
  else
    do return true end;
  end;
end
StringTools.ltrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, r)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = r;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end
StringTools.rtrim = function(s) 
  local l = __lua_lib_luautf8_Utf8.len(s);
  local r = 0;
  while ((r < l) and StringTools.isSpace(s, (l - r) - 1)) do 
    r = r + 1;
  end;
  if (r > 0) then 
    local pos = 0;
    local len = l - r;
    if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(s)))) then 
      len = __lua_lib_luautf8_Utf8.len(s);
    else
      if (len < 0) then 
        len = __lua_lib_luautf8_Utf8.len(s) + len;
      end;
    end;
    if (pos < 0) then 
      pos = __lua_lib_luautf8_Utf8.len(s) + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return __lua_lib_luautf8_Utf8.sub(s, pos + 1, pos + len) end;
  else
    do return s end;
  end;
end
StringTools.trim = function(s) 
  do return StringTools.ltrim(StringTools.rtrim(s)) end;
end

___Xml_XmlType_Impl_.new = {}
___Xml_XmlType_Impl_.__name__ = true
___Xml_XmlType_Impl_.toString = function(this1) 
  local _g = this1;
  if (_g) == 0 then 
    do return "Element" end;
  elseif (_g) == 1 then 
    do return "PCData" end;
  elseif (_g) == 2 then 
    do return "CData" end;
  elseif (_g) == 3 then 
    do return "Comment" end;
  elseif (_g) == 4 then 
    do return "DocType" end;
  elseif (_g) == 5 then 
    do return "ProcessingInstruction" end;
  elseif (_g) == 6 then 
    do return "Document" end; end;
end

Xml.new = function(nodeType) 
  local self = _hx_new(Xml.prototype)
  Xml.super(self,nodeType)
  return self
end
Xml.super = function(self,nodeType) 
  self.nodeType = nodeType;
  self.children = _hx_tab_array({}, 0);
  self.attributeMap = __haxe_ds_StringMap.new();
end
Xml.__name__ = true
Xml.prototype = _hx_e();
Xml.prototype.get = function(self,att) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local ret = self.attributeMap.h[att];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
Xml.prototype.exists = function(self,att) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  do return self.attributeMap.h[att] ~= nil end
end
Xml.prototype.attributes = function(self) 
  if (self.nodeType ~= Xml.Element) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  do return self.attributeMap:keys() end
end
Xml.prototype.elementsNamed = function(self,name) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.children;
  while (_g1 < _g2.length) do 
    local child = _g2[_g1];
    _g1 = _g1 + 1;
    local tmp;
    if (child.nodeType == Xml.Element) then 
      if (child.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_2
          if (child.nodeType == nil) then 
          _hx_2 = "null"; else 
          _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
          return _hx_2
        end )()))),0);
      end;
      tmp = child.nodeName == name;
    else
      tmp = false;
    end;
    if (tmp) then 
      _g:push(child);
    end;
  end;
  local ret = _g;
  do return __haxe_iterators_ArrayIterator.new(ret) end
end
Xml.prototype.firstElement = function(self) 
  if ((self.nodeType ~= Xml.Document) and (self.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (self.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(self.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do 
    local child = _g1[_g];
    _g = _g + 1;
    if (child.nodeType == Xml.Element) then 
      do return child end;
    end;
  end;
  do return nil end
end
Xml.prototype.toString = function(self) 
  do return __haxe_xml_Printer.print(self) end
end

Xml.prototype.__class__ =  Xml

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    local idx = 1;
    local ret = _hx_tab_array({}, 0);
    while (idx ~= nil) do 
      local newidx = 0;
      if (__lua_lib_luautf8_Utf8.len("\n") > 0) then 
        newidx = __lua_lib_luautf8_Utf8.find(s, "\n", idx, true);
      else
        if (idx >= __lua_lib_luautf8_Utf8.len(s)) then 
          newidx = nil;
        else
          newidx = idx + 1;
        end;
      end;
      if (newidx ~= nil) then 
        local match = __lua_lib_luautf8_Utf8.sub(s, idx, newidx - 1);
        ret:push(match);
        idx = newidx + __lua_lib_luautf8_Utf8.len("\n");
      else
        ret:push(__lua_lib_luautf8_Utf8.sub(s, idx, __lua_lib_luautf8_Utf8.len(s)));
        idx = nil;
      end;
    end;
    do return ret:slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,Std.string(value),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__haxe_xml__Access_NodeAccess_Impl_.new = {}
__haxe_xml__Access_NodeAccess_Impl_.__name__ = true
__haxe_xml__Access_NodeAccess_Impl_.resolve = function(this1,name) 
  local x = this1:elementsNamed(name):next();
  if (x == nil) then 
    local xname;
    if (this1.nodeType == Xml.Document) then 
      xname = "Document";
    else
      if (this1.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_1
          if (this1.nodeType == nil) then 
          _hx_1 = "null"; else 
          _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(this1.nodeType); end
          return _hx_1
        end )()))),0);
      end;
      xname = this1.nodeName;
    end;
    _G.error(__haxe_Exception.thrown(Std.string(Std.string(xname) .. Std.string(" is missing element ")) .. Std.string(name)),0);
  end;
  if ((x.nodeType ~= Xml.Document) and (x.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Invalid nodeType ") .. Std.string(((function() 
      local _hx_2
      if (x.nodeType == nil) then 
      _hx_2 = "null"; else 
      _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(x.nodeType); end
      return _hx_2
    end )()))),0);
  end;
  local this1 = x;
  do return this1 end;
end

__haxe_xml__Access_AttribAccess_Impl_.new = {}
__haxe_xml__Access_AttribAccess_Impl_.__name__ = true
__haxe_xml__Access_AttribAccess_Impl_.resolve = function(this1,name) 
  if (this1.nodeType == Xml.Document) then 
    _G.error(__haxe_Exception.thrown(Std.string("Cannot access document attribute ") .. Std.string(name)),0);
  end;
  local v = this1:get(name);
  if (v == nil) then 
    if (this1.nodeType ~= Xml.Element) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
        local _hx_1
        if (this1.nodeType == nil) then 
        _hx_1 = "null"; else 
        _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(this1.nodeType); end
        return _hx_1
      end )()))),0);
    end;
    _G.error(__haxe_Exception.thrown(Std.string(Std.string(this1.nodeName) .. Std.string(" is missing attribute ")) .. Std.string(name)),0);
  end;
  do return v end;
end

__haxe_xml__Access_HasAttribAccess_Impl_.new = {}
__haxe_xml__Access_HasAttribAccess_Impl_.__name__ = true
__haxe_xml__Access_HasAttribAccess_Impl_.resolve = function(this1,name) 
  if (this1.nodeType == Xml.Document) then 
    _G.error(__haxe_Exception.thrown(Std.string("Cannot access document attribute ") .. Std.string(name)),0);
  end;
  do return this1:exists(name) end;
end

__haxe_xml__Access_NodeListAccess_Impl_.new = {}
__haxe_xml__Access_NodeListAccess_Impl_.__name__ = true
__haxe_xml__Access_NodeListAccess_Impl_.resolve = function(this1,name) 
  local l = _hx_tab_array({}, 0);
  local x = this1:elementsNamed(name);
  while (x:hasNext()) do 
    local x = x:next();
    if ((x.nodeType ~= Xml.Document) and (x.nodeType ~= Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Invalid nodeType ") .. Std.string(((function() 
        local _hx_1
        if (x.nodeType == nil) then 
        _hx_1 = "null"; else 
        _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(x.nodeType); end
        return _hx_1
      end )()))),0);
    end;
    local this1 = x;
    l:push(this1);
  end;
  do return l end;
end

__haxe_xml_Printer.new = function(pretty) 
  local self = _hx_new(__haxe_xml_Printer.prototype)
  __haxe_xml_Printer.super(self,pretty)
  return self
end
__haxe_xml_Printer.super = function(self,pretty) 
  self.output = StringBuf.new();
  self.pretty = pretty;
end
__haxe_xml_Printer.__name__ = true
__haxe_xml_Printer.print = function(xml,pretty) 
  if (pretty == nil) then 
    pretty = false;
  end;
  local printer = __haxe_xml_Printer.new(pretty);
  printer:writeNode(xml, "");
  do return _G.table.concat(printer.output.b) end;
end
__haxe_xml_Printer.prototype = _hx_e();
__haxe_xml_Printer.prototype.writeNode = function(self,value,tabs) 
  local _g = value.nodeType;
  if (_g) == 0 then 
    local _this = self.output;
    local str = Std.string(Std.string(tabs) .. Std.string("<"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if (value.nodeType ~= Xml.Element) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
        local _hx_1
        if (value.nodeType == nil) then 
        _hx_1 = "null"; else 
        _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_1
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(value.nodeName);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    local attribute = value:attributes();
    while (attribute:hasNext()) do 
      local attribute = attribute:next();
      local _this = self.output;
      local str = Std.string(Std.string(Std.string(" ") .. Std.string(attribute)) .. Std.string("=\""));
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      local input = StringTools.htmlEscape(value:get(attribute), true);
      local _this = self.output;
      local str = Std.string(input);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      local _this = self.output;
      local str = "\"";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    end;
    if (self:hasChildren(value)) then 
      local _this = self.output;
      local str = ">";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      end;
      if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
          local _hx_2
          if (value.nodeType == nil) then 
          _hx_2 = "null"; else 
          _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
          return _hx_2
        end )()))),0);
      end;
      local _g_current = 0;
      local _g_array = value.children;
      while (_g_current < _g_array.length) do 
        _g_current = _g_current + 1;
        local child = _g_array[_g_current - 1];
        self:writeNode(child, (function() 
          local _hx_3
          if (self.pretty) then 
          _hx_3 = Std.string(tabs) .. Std.string("\t"); else 
          _hx_3 = tabs; end
          return _hx_3
        end )());
      end;
      local _this = self.output;
      local str = Std.string(Std.string(tabs) .. Std.string("</"));
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      if (value.nodeType ~= Xml.Element) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element but found ") .. Std.string(((function() 
          local _hx_4
          if (value.nodeType == nil) then 
          _hx_4 = "null"; else 
          _hx_4 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
          return _hx_4
        end )()))),0);
      end;
      local _this = self.output;
      local str = Std.string(value.nodeName);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      local _this = self.output;
      local str = ">";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      end;
    else
      local _this = self.output;
      local str = "/>";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      end;
    end;
  elseif (_g) == 1 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_5
        if (value.nodeType == nil) then 
        _hx_5 = "null"; else 
        _hx_5 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_5
      end )()))),0);
    end;
    local nodeValue = value.nodeValue;
    if (__lua_lib_luautf8_Utf8.len(nodeValue) ~= 0) then 
      local input = Std.string(tabs) .. Std.string(StringTools.htmlEscape(nodeValue));
      local _this = self.output;
      local str = Std.string(input);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      if (self.pretty) then 
        local _this = self.output;
        local str = "\n";
        _G.table.insert(_this.b, str);
        local _this = _this;
        _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
      end;
    end;
  elseif (_g) == 2 then 
    local _this = self.output;
    local str = Std.string(Std.string(tabs) .. Std.string("<![CDATA["));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_6
        if (value.nodeType == nil) then 
        _hx_6 = "null"; else 
        _hx_6 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_6
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(value.nodeValue);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    local _this = self.output;
    local str = "]]>";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    end;
  elseif (_g) == 3 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_7
        if (value.nodeType == nil) then 
        _hx_7 = "null"; else 
        _hx_7 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_7
      end )()))),0);
    end;
    local commentContent = value.nodeValue;
    commentContent = EReg.new("[\n\r\t]+", "g"):replace(commentContent, "");
    commentContent = Std.string(Std.string("<!--") .. Std.string(commentContent)) .. Std.string("-->");
    local _this = self.output;
    local str = Std.string(tabs);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    local input = StringTools.trim(commentContent);
    local _this = self.output;
    local str = Std.string(input);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    end;
  elseif (_g) == 4 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_8
        if (value.nodeType == nil) then 
        _hx_8 = "null"; else 
        _hx_8 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_8
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(Std.string(Std.string("<!DOCTYPE ") .. Std.string(value.nodeValue)) .. Std.string(">"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    end;
  elseif (_g) == 5 then 
    if ((value.nodeType == Xml.Document) or (value.nodeType == Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
        local _hx_9
        if (value.nodeType == nil) then 
        _hx_9 = "null"; else 
        _hx_9 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_9
      end )()))),0);
    end;
    local _this = self.output;
    local str = Std.string(Std.string(Std.string("<?") .. Std.string(value.nodeValue)) .. Std.string("?>"));
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    if (self.pretty) then 
      local _this = self.output;
      local str = "\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + __lua_lib_luautf8_Utf8.len(str);
    end;
  elseif (_g) == 6 then 
    if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
        local _hx_10
        if (value.nodeType == nil) then 
        _hx_10 = "null"; else 
        _hx_10 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
        return _hx_10
      end )()))),0);
    end;
    local _g_current = 0;
    local _g_array = value.children;
    while (_g_current < _g_array.length) do 
      _g_current = _g_current + 1;
      local child = _g_array[_g_current - 1];
      self:writeNode(child, tabs);
    end; end;
end
__haxe_xml_Printer.prototype.hasChildren = function(self,value) 
  if ((value.nodeType ~= Xml.Document) and (value.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Bad node type, expected Element or Document but found ") .. Std.string(((function() 
      local _hx_1
      if (value.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(value.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local _g_current = 0;
  local _g_array = value.children;
  while (_g_current < _g_array.length) do 
    _g_current = _g_current + 1;
    local child = _g_array[_g_current - 1];
    local _g = child.nodeType;
    if (_g) == 0 or (_g) == 1 then 
      do return true end;
    elseif (_g) == 2 or (_g) == 3 then 
      if ((child.nodeType == Xml.Document) or (child.nodeType == Xml.Element)) then 
        _G.error(__haxe_Exception.thrown(Std.string("Bad node type, unexpected ") .. Std.string(((function() 
          local _hx_2
          if (child.nodeType == nil) then 
          _hx_2 = "null"; else 
          _hx_2 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(child.nodeType); end
          return _hx_2
        end )()))),0);
      end;
      if (__lua_lib_luautf8_Utf8.len(StringTools.ltrim(child.nodeValue)) ~= 0) then 
        do return true end;
      end;else end;
  end;
  do return false end
end

__haxe_xml_Printer.prototype.__class__ =  __haxe_xml_Printer

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do 
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__parallax_Parallax.new = function(id,world,cameraX,cameraY,speed,pushApartOnZoom) 
  local self = _hx_new(__parallax_Parallax.prototype)
  __parallax_Parallax.super(self,id,world,cameraX,cameraY,speed,pushApartOnZoom)
  return self
end
__parallax_Parallax.super = function(self,id,world,cameraX,cameraY,speed,pushApartOnZoom) 
  if (pushApartOnZoom == nil) then 
    pushApartOnZoom = 0;
  end;
  if (speed == nil) then 
    speed = 1;
  end;
  self.id = id;
  self.world = world;
  self.speed = speed;
  self.pushApartOnZoom = pushApartOnZoom;
  self.camera = __parallax_ParallaxCamera.new(cameraX, cameraY);
end
__parallax_Parallax.__name__ = true
__parallax_Parallax.parse = function(xml,screenWidth,screenHeight) 
  if (screenHeight == nil) then 
    screenHeight = 1080;
  end;
  if (screenWidth == nil) then 
    screenWidth = 1920;
  end;
  local x = xml:firstElement();
  if ((x.nodeType ~= Xml.Document) and (x.nodeType ~= Xml.Element)) then 
    _G.error(__haxe_Exception.thrown(Std.string("Invalid nodeType ") .. Std.string(((function() 
      local _hx_1
      if (x.nodeType == nil) then 
      _hx_1 = "null"; else 
      _hx_1 = _hx_wrap_if_string_field(___Xml_XmlType_Impl_,'toString')(x.nodeType); end
      return _hx_1
    end )()))),0);
  end;
  local this1 = x;
  local _xml = this1;
  local world = __parallax_Parallax.new((function() 
    local _hx_2
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "id")) then 
    _hx_2 = __haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "id"); else 
    _hx_2 = "world"; end
    return _hx_2
  end )(), (function() 
    local _hx_3
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "world")) then 
    _hx_3 = __haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "world"); else 
    _hx_3 = ""; end
    return _hx_3
  end )(), (function() 
    local _hx_4
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "camX")) then 
    _hx_4 = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "camX")); else 
    _hx_4 = 0.0; end
    return _hx_4
  end )(), (function() 
    local _hx_5
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "camY")) then 
    _hx_5 = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "camY")); else 
    _hx_5 = 0.0; end
    return _hx_5
  end )(), 1, (function() 
    local _hx_6
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "pushApartOnZoom")) then 
    _hx_6 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "pushApartOnZoom")); else 
    _hx_6 = 0; end
    return _hx_6
  end )());
  if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "width")) then 
    world.width = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "width"));
  end;
  if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "height")) then 
    world.height = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "height"));
  end;
  world.camera.width = screenWidth;
  world.camera.height = screenHeight;
  local defaultValue = false;
  if (defaultValue == nil) then 
    defaultValue = true;
  end;
  local useCenterPos = (function() 
    local _hx_7
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(_xml, "useCenterPos")) then 
    _hx_7 = __haxe_xml__Access_AttribAccess_Impl_.resolve(_xml, "useCenterPos") == "true"; else 
    _hx_7 = defaultValue; end
    return _hx_7
  end )();
  if (useCenterPos) then 
    local world1 = world.camera;
    world1.x = world1.x - (screenWidth / 2);
    local world = world.camera;
    world.y = world.y - (screenHeight / 2);
  end;
  if (world.layers == nil) then 
    world.layers = _hx_tab_array({}, 0);
  end;
  local _g = 0;
  local _g1 = __haxe_xml__Access_NodeListAccess_Impl_.resolve(__haxe_xml__Access_NodeAccess_Impl_.resolve(_xml, "layers"), "layer");
  while (_g < _g1.length) do 
    local item = _g1[_g];
    _g = _g + 1;
    world.layers:push(__parallax_ParallaxLayer.parse(item));
  end;
  world:updateLayers();
  do return world end;
end
__parallax_Parallax.prototype = _hx_e();
__parallax_Parallax.prototype.moveCamera = function(self,x,y) 
  local tmp = self.camera;
  tmp.x = tmp.x + (x * self.speed);
  local tmp = self.camera;
  tmp.y = tmp.y + (y * self.speed);
  self:checkBounds();
  self:updateLayers();
end
__parallax_Parallax.prototype.centerCamera = function(self) 
  self.camera.x = ((self.width * self.camera.zoom) - self.camera.width) / 2;
  self.camera.y = ((self.height * self.camera.zoom) - self.camera.height) / 2;
  self:updateLayers();
end
__parallax_Parallax.prototype.updateLayers = function(self) 
  local _g = 0;
  local _g1 = self.layers;
  while (_g < _g1.length) do 
    local layer = _g1[_g];
    _g = _g + 1;
    layer.x = _G.math.floor(((layer.originX - self.camera.x) + ((self.camera.originX - self.camera.x) * (layer.depth - 1))) + 0.5);
    layer.y = _G.math.floor(((layer.originY - self.camera.y) + ((self.camera.originY - self.camera.y) * (layer.depth - 1))) + 0.5);
  end;
  if (self.pushApartOnZoom > 0) then 
    local _g = 0;
    local _g1 = self.layers;
    while (_g < _g1.length) do 
      local layer = _g1[_g];
      _g = _g + 1;
      if (layer.depth > 1) then 
        local _g = 0;
        local _g1 = layer.sprites;
        while (_g < _g1.length) do 
          local sprite = _g1[_g];
          _g = _g + 1;
          sprite.x = sprite.originX + _G.math.floor((((function() 
            local _hx_1
            if (((sprite.originX + (sprite.width * 0.5)) - (self.width * 0.5)) < 0) then 
            _hx_1 = -1; else 
            _hx_1 = 1; end
            return _hx_1
          end )() * ((layer.depth * self.speed) * Math.max(self.camera.zoom - 1, 0))) * self.pushApartOnZoom) + 0.5);
          sprite.y = sprite.originY + _G.math.floor((((function() 
            local _hx_2
            if (((sprite.originY + (sprite.height * 0.5)) - (self.height * 0.5)) < 0) then 
            _hx_2 = -1; else 
            _hx_2 = 1; end
            return _hx_2
          end )() * ((layer.depth * self.speed) * Math.max(self.camera.zoom - 1, 0))) * self.pushApartOnZoom) + 0.5);
        end;
      end;
    end;
  end;
end
__parallax_Parallax.prototype.setZoomBounds = function(self,screenY) 
  self.camera.minZoom = screenY / (self.height / self.camera.zoom);
  self.camera.deltaZoom = (1 - self.camera.minZoom) / 2;
  self.camera.maxZoom = 1 + (self.camera.deltaZoom * 2);
  local _g = _hx_tab_array({}, 0);
  _g:push((0 * self.camera.deltaZoom) + self.camera.minZoom);
  _g:push(self.camera.deltaZoom + self.camera.minZoom);
  _g:push((2 * self.camera.deltaZoom) + self.camera.minZoom);
  _g:push((3 * self.camera.deltaZoom) + self.camera.minZoom);
  _g:push((4 * self.camera.deltaZoom) + self.camera.minZoom);
  local values = _g;
  local closest = 42.;
  local _g = 0;
  while (_g < values.length) do 
    local item = values[_g];
    _g = _g + 1;
    if (_G.math.abs(item - self.camera.zoom) < _G.math.abs(self.camera.zoom - closest)) then 
      closest = item;
    end;
  end;
  if (closest ~= self.camera.zoom) then 
    self.camera.zoom = closest;
    self:applyZoom();
  end;
end
__parallax_Parallax.prototype.checkBounds = function(self) 
  if (self.camera.x < 0) then 
    self.camera.x = 0;
  else
    if (self.camera.x > ((self.width * self.camera.zoom) - self.camera.width)) then 
      self.camera.x = (self.width * self.camera.zoom) - self.camera.width;
    end;
  end;
  if (self.camera.y < 0) then 
    self.camera.y = 0;
  else
    if (self.camera.y > ((self.height * self.camera.zoom) - self.camera.height)) then 
      self.camera.y = (self.height * self.camera.zoom) - self.camera.height;
    end;
  end;
end
__parallax_Parallax.prototype.onZoom = function(self,delta,zoomOffsetX,zoomOffsetY) 
  self.camera:onZoom(delta);
  self.zoomOffsetX = (zoomOffsetX + self.camera.x) / self.camera.preZoom;
  self.zoomOffsetY = (zoomOffsetY + self.camera.y) / self.camera.preZoom;
  self:applyZoom();
end
__parallax_Parallax.prototype.applyZoom = function(self) 
  local _this = self.camera;
  if (_this.preZoom == _this.zoom) then 
    do return end;
  end;
  if (self.zoomOffsetX ~= nil) then 
    local offsetX = (self.zoomOffsetX * self.camera.preZoom) - (self.zoomOffsetX * self.camera.zoom);
    local offsetY = (self.zoomOffsetY * self.camera.preZoom) - (self.zoomOffsetY * self.camera.zoom);
    local tmp = self.camera;
    tmp.x = tmp.x - offsetX;
    local tmp = self.camera;
    tmp.y = tmp.y - offsetY;
  end;
  self:checkBounds();
  self:updateLayers();
end

__parallax_Parallax.prototype.__class__ =  __parallax_Parallax

__parallax_ParallaxCamera.new = function(x,y,width,height,zoom) 
  local self = _hx_new(__parallax_ParallaxCamera.prototype)
  __parallax_ParallaxCamera.super(self,x,y,width,height,zoom)
  return self
end
__parallax_ParallaxCamera.super = function(self,x,y,width,height,zoom) 
  if (zoom == nil) then 
    zoom = 1;
  end;
  if (height == nil) then 
    height = 1080;
  end;
  if (width == nil) then 
    width = 1920;
  end;
  self.originX = x;
  self.originY = y;
  self.width = width;
  self.height = height;
  self.zoom = zoom;
  self.x = x;
  self.y = y;
end
__parallax_ParallaxCamera.__name__ = true
__parallax_ParallaxCamera.prototype = _hx_e();
__parallax_ParallaxCamera.prototype.onZoom = function(self,delta) 
  self.preZoom = self.zoom;
  local tmp = self;
  tmp.zoom = tmp.zoom + (delta * self.deltaZoom);
  if (self.zoom > self.maxZoom) then 
    self.zoom = self.maxZoom;
  end;
  if (self.zoom < self.minZoom) then 
    self.zoom = self.minZoom;
  end;
end
__parallax_ParallaxCamera.prototype.canApplyZoom = function(self) 
  do return self.preZoom ~= self.zoom end
end

__parallax_ParallaxCamera.prototype.__class__ =  __parallax_ParallaxCamera

__parallax_ParallaxLayer.new = function(id,depth,x,y) 
  local self = _hx_new(__parallax_ParallaxLayer.prototype)
  __parallax_ParallaxLayer.super(self,id,depth,x,y)
  return self
end
__parallax_ParallaxLayer.super = function(self,id,depth,x,y) 
  self.id = id;
  self.depth = depth;
  self.originX = x;
  self.originY = y;
  self.x = x;
  self.y = y;
  self.scale = 1;
end
__parallax_ParallaxLayer.__name__ = true
__parallax_ParallaxLayer.parse = function(xml) 
  local layer = __haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "id");
  local defaultValue = 1;
  if (defaultValue == nil) then 
    defaultValue = 0.0;
  end;
  local layer = __parallax_ParallaxLayer.new(layer, (function() 
    local _hx_1
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "depth")) then 
    _hx_1 = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "depth")); else 
    _hx_1 = defaultValue; end
    return _hx_1
  end )(), (function() 
    local _hx_2
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "x")) then 
    _hx_2 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "x")); else 
    _hx_2 = 0; end
    return _hx_2
  end )(), (function() 
    local _hx_3
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "y")) then 
    _hx_3 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "y")); else 
    _hx_3 = 0; end
    return _hx_3
  end )());
  if (layer.sprites == nil) then 
    layer.sprites = _hx_tab_array({}, 0);
  end;
  local _g = 0;
  local _g1 = __haxe_xml__Access_NodeListAccess_Impl_.resolve(xml, "sprite");
  while (_g < _g1.length) do 
    local item = _g1[_g];
    _g = _g + 1;
    layer:addSprite(__parallax_ParallaxSprite.parse(item));
  end;
  do return layer end;
end
__parallax_ParallaxLayer.prototype = _hx_e();
__parallax_ParallaxLayer.prototype.addSprite = function(self,sprite) 
  self.sprites:push(sprite);
end

__parallax_ParallaxLayer.prototype.__class__ =  __parallax_ParallaxLayer

__parallax_ParallaxSprite.new = function(id,img,x,y,scaleX,scaleY,width,height,offsetX,offsetY,isAnim) 
  local self = _hx_new(__parallax_ParallaxSprite.prototype)
  __parallax_ParallaxSprite.super(self,id,img,x,y,scaleX,scaleY,width,height,offsetX,offsetY,isAnim)
  return self
end
__parallax_ParallaxSprite.super = function(self,id,img,x,y,scaleX,scaleY,width,height,offsetX,offsetY,isAnim) 
  if (isAnim == nil) then 
    isAnim = false;
  end;
  if (offsetY == nil) then 
    offsetY = 0;
  end;
  if (offsetX == nil) then 
    offsetX = 0;
  end;
  if (height == nil) then 
    height = 0;
  end;
  if (width == nil) then 
    width = 0;
  end;
  if (scaleY == nil) then 
    scaleY = 1;
  end;
  if (scaleX == nil) then 
    scaleX = 1;
  end;
  self.id = id;
  self.img = img;
  self.originX = x;
  self.originY = y;
  self.x = x;
  self.y = y;
  self.width = width;
  self.height = height;
  self.scaleX = scaleX;
  self.scaleY = scaleY;
  self.isAnim = isAnim;
  self.offsetX = offsetX;
  self.offsetY = offsetY;
  self.rotation = 0;
end
__parallax_ParallaxSprite.__name__ = true
__parallax_ParallaxSprite.parse = function(xml) 
  local tmp = (function() 
    local _hx_1
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "id")) then 
    _hx_1 = __haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "id"); else 
    _hx_1 = __haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "img"); end
    return _hx_1
  end )();
  local tmp1 = (function() 
    local _hx_2
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "img") and (__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "img") ~= "")) then 
    _hx_2 = Std.string(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "img")) .. Std.string(".png"); else 
    _hx_2 = ""; end
    return _hx_2
  end )();
  local tmp2 = (function() 
    local _hx_3
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "x")) then 
    _hx_3 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "x")); else 
    _hx_3 = 0; end
    return _hx_3
  end )();
  local tmp3 = (function() 
    local _hx_4
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "y")) then 
    _hx_4 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "y")); else 
    _hx_4 = 0; end
    return _hx_4
  end )();
  local defaultValue = 1;
  if (defaultValue == nil) then 
    defaultValue = 0.0;
  end;
  local tmp4 = (function() 
    local _hx_5
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "scaleX")) then 
    _hx_5 = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "scaleX")); else 
    _hx_5 = defaultValue; end
    return _hx_5
  end )();
  local defaultValue = 1;
  if (defaultValue == nil) then 
    defaultValue = 0.0;
  end;
  local tmp5 = (function() 
    local _hx_6
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "scaleY")) then 
    _hx_6 = Std.parseFloat(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "scaleY")); else 
    _hx_6 = defaultValue; end
    return _hx_6
  end )();
  local tmp6 = (function() 
    local _hx_7
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "width")) then 
    _hx_7 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "width")); else 
    _hx_7 = 0; end
    return _hx_7
  end )();
  local tmp7 = (function() 
    local _hx_8
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "height")) then 
    _hx_8 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "height")); else 
    _hx_8 = 0; end
    return _hx_8
  end )();
  local tmp8 = (function() 
    local _hx_9
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "offsetX")) then 
    _hx_9 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "offsetX")); else 
    _hx_9 = 0; end
    return _hx_9
  end )();
  local tmp9 = (function() 
    local _hx_10
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "offsetY")) then 
    _hx_10 = Std.parseInt(__haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "offsetY")); else 
    _hx_10 = 0; end
    return _hx_10
  end )();
  local defaultValue = false;
  if (defaultValue == nil) then 
    defaultValue = true;
  end;
  do return __parallax_ParallaxSprite.new(tmp, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, (function() 
    local _hx_11
    if (__haxe_xml__Access_HasAttribAccess_Impl_.resolve(xml, "isAnim")) then 
    _hx_11 = __haxe_xml__Access_AttribAccess_Impl_.resolve(xml, "isAnim") == "true"; else 
    _hx_11 = defaultValue; end
    return _hx_11
  end )()) end;
end
__parallax_ParallaxSprite.prototype = _hx_e();

__parallax_ParallaxSprite.prototype.__class__ =  __parallax_ParallaxSprite
-- require this for lua 5.1
pcall(require, 'bit')
if bit then
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
else
  _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end;
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end;
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end;

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  if (__lua_lib_lrexlib_Rex == nil) then 
    _G.error(__haxe_Exception.thrown("Rex is missing.  Please install lrexlib-pcre."),0);
  end;
  String.__name__ = true;
  Array.__name__ = true;EReg.FLAGS = __lua_lib_lrexlib_Rex.flags();
  
  Xml.Element = 0;
  
  Xml.Document = 6;
  
  __haxe_ds_StringMap.tnull = ({});
  
  
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
